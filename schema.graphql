# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  experience(
    where: ExperienceWhereInput! = {}
    orderBy: [ExperienceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Experience!]
  experienceCount(where: ExperienceWhereInput! = {}): Int
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  articles(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  articlesCount(where: ArticleWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  experience: ExperienceManyRelationFilter
  projects: ProjectManyRelationFilter
  articles: ArticleManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ExperienceManyRelationFilter {
  every: ExperienceWhereInput
  some: ExperienceWhereInput
  none: ExperienceWhereInput
}

input ProjectManyRelationFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input ArticleManyRelationFilter {
  every: ArticleWhereInput
  some: ArticleWhereInput
  none: ArticleWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  experience: ExperienceRelateToManyForUpdateInput
  projects: ProjectRelateToManyForUpdateInput
  articles: ArticleRelateToManyForUpdateInput
}

input ExperienceRelateToManyForUpdateInput {
  disconnect: [ExperienceWhereUniqueInput!]
  set: [ExperienceWhereUniqueInput!]
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

input ProjectRelateToManyForUpdateInput {
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ArticleRelateToManyForUpdateInput {
  disconnect: [ArticleWhereUniqueInput!]
  set: [ArticleWhereUniqueInput!]
  create: [ArticleCreateInput!]
  connect: [ArticleWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  experience: ExperienceRelateToManyForCreateInput
  projects: ProjectRelateToManyForCreateInput
  articles: ArticleRelateToManyForCreateInput
}

input ExperienceRelateToManyForCreateInput {
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

input ProjectRelateToManyForCreateInput {
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ArticleRelateToManyForCreateInput {
  create: [ArticleCreateInput!]
  connect: [ArticleWhereUniqueInput!]
}

type Experience {
  id: ID!
  companyName: String
  position: String
  description: String
  user: User
}

input ExperienceWhereUniqueInput {
  id: ID
}

input ExperienceWhereInput {
  AND: [ExperienceWhereInput!]
  OR: [ExperienceWhereInput!]
  NOT: [ExperienceWhereInput!]
  id: IDFilter
  companyName: StringFilter
  position: StringFilter
  description: StringFilter
  user: UserWhereInput
}

input ExperienceOrderByInput {
  id: OrderDirection
  companyName: OrderDirection
  position: OrderDirection
  description: OrderDirection
}

input ExperienceUpdateInput {
  companyName: String
  position: String
  description: String
  user: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ExperienceUpdateArgs {
  where: ExperienceWhereUniqueInput!
  data: ExperienceUpdateInput!
}

input ExperienceCreateInput {
  companyName: String
  position: String
  description: String
  user: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Project {
  id: ID!
  name: String
  organization: String
  shortDescription: String
  challenges(
    where: ProjectChallengeWhereInput! = {}
    orderBy: [ProjectChallengeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProjectChallenge!]
  challengesCount(where: ProjectChallengeWhereInput! = {}): Int
  technologies: String
  features: String
  sourceCodeUrl: String
  liveSiteUrl: String
  objective: String
  year: Int
  majorTasks: String
  user: User
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  thumbnail: Image
  banner: Image
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  name: StringFilter
  organization: StringFilter
  shortDescription: StringFilter
  challenges: ProjectChallengeManyRelationFilter
  technologies: StringFilter
  features: StringFilter
  sourceCodeUrl: StringFilter
  liveSiteUrl: StringFilter
  objective: StringFilter
  year: IntNullableFilter
  majorTasks: StringFilter
  user: UserWhereInput
  images: ImageManyRelationFilter
  thumbnail: ImageWhereInput
  banner: ImageWhereInput
}

input ProjectChallengeManyRelationFilter {
  every: ProjectChallengeWhereInput
  some: ProjectChallengeWhereInput
  none: ProjectChallengeWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
  organization: OrderDirection
  shortDescription: OrderDirection
  technologies: OrderDirection
  features: OrderDirection
  sourceCodeUrl: OrderDirection
  liveSiteUrl: OrderDirection
  objective: OrderDirection
  year: OrderDirection
  majorTasks: OrderDirection
}

input ProjectUpdateInput {
  name: String
  organization: String
  shortDescription: String
  challenges: ProjectChallengeRelateToManyForUpdateInput
  technologies: String
  features: String
  sourceCodeUrl: String
  liveSiteUrl: String
  objective: String
  year: Int
  majorTasks: String
  user: UserRelateToOneForUpdateInput
  images: ImageRelateToManyForUpdateInput
  thumbnail: ImageRelateToOneForUpdateInput
  banner: ImageRelateToOneForUpdateInput
}

input ProjectChallengeRelateToManyForUpdateInput {
  disconnect: [ProjectChallengeWhereUniqueInput!]
  set: [ProjectChallengeWhereUniqueInput!]
  create: [ProjectChallengeCreateInput!]
  connect: [ProjectChallengeWhereUniqueInput!]
}

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input ImageRelateToOneForUpdateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
  disconnect: Boolean
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  name: String
  organization: String
  shortDescription: String
  challenges: ProjectChallengeRelateToManyForCreateInput
  technologies: String
  features: String
  sourceCodeUrl: String
  liveSiteUrl: String
  objective: String
  year: Int
  majorTasks: String
  user: UserRelateToOneForCreateInput
  images: ImageRelateToManyForCreateInput
  thumbnail: ImageRelateToOneForCreateInput
  banner: ImageRelateToOneForCreateInput
}

input ProjectChallengeRelateToManyForCreateInput {
  create: [ProjectChallengeCreateInput!]
  connect: [ProjectChallengeWhereUniqueInput!]
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input ImageRelateToOneForCreateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
}

type ProjectChallenge {
  id: ID!
  name: String
  description: String
  project: Project
}

input ProjectChallengeWhereUniqueInput {
  id: ID
}

input ProjectChallengeWhereInput {
  AND: [ProjectChallengeWhereInput!]
  OR: [ProjectChallengeWhereInput!]
  NOT: [ProjectChallengeWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  project: ProjectWhereInput
}

input ProjectChallengeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input ProjectChallengeUpdateInput {
  name: String
  description: String
  project: ProjectRelateToOneForUpdateInput
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input ProjectChallengeUpdateArgs {
  where: ProjectChallengeWhereUniqueInput!
  data: ProjectChallengeUpdateInput!
}

input ProjectChallengeCreateInput {
  name: String
  description: String
  project: ProjectRelateToOneForCreateInput
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

type Article {
  id: ID!
  name: String
  url: String
  date: String
  user: User
  thumbnail: Image
}

input ArticleWhereUniqueInput {
  id: ID
}

input ArticleWhereInput {
  AND: [ArticleWhereInput!]
  OR: [ArticleWhereInput!]
  NOT: [ArticleWhereInput!]
  id: IDFilter
  name: StringFilter
  url: StringFilter
  date: StringFilter
  user: UserWhereInput
  thumbnail: ImageWhereInput
}

input ArticleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  url: OrderDirection
  date: OrderDirection
}

input ArticleUpdateInput {
  name: String
  url: String
  date: String
  user: UserRelateToOneForUpdateInput
  thumbnail: ImageRelateToOneForUpdateInput
}

input ArticleUpdateArgs {
  where: ArticleWhereUniqueInput!
  data: ArticleUpdateInput!
}

input ArticleCreateInput {
  name: String
  url: String
  date: String
  user: UserRelateToOneForCreateInput
  thumbnail: ImageRelateToOneForCreateInput
}

type Image {
  id: ID!
  for: String
  fieldName: CloudinaryImage_File
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  for: StringNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ImageOrderByInput {
  id: OrderDirection
  for: OrderDirection
}

input ImageUpdateInput {
  for: String
  fieldName: Upload
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  for: String
  fieldName: Upload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createExperience(data: ExperienceCreateInput!): Experience
  createExperiences(data: [ExperienceCreateInput!]!): [Experience]
  updateExperience(
    where: ExperienceWhereUniqueInput!
    data: ExperienceUpdateInput!
  ): Experience
  updateExperiences(data: [ExperienceUpdateArgs!]!): [Experience]
  deleteExperience(where: ExperienceWhereUniqueInput!): Experience
  deleteExperiences(where: [ExperienceWhereUniqueInput!]!): [Experience]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(
    where: ProjectWhereUniqueInput!
    data: ProjectUpdateInput!
  ): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createProjectChallenge(data: ProjectChallengeCreateInput!): ProjectChallenge
  createProjectChallenges(
    data: [ProjectChallengeCreateInput!]!
  ): [ProjectChallenge]
  updateProjectChallenge(
    where: ProjectChallengeWhereUniqueInput!
    data: ProjectChallengeUpdateInput!
  ): ProjectChallenge
  updateProjectChallenges(
    data: [ProjectChallengeUpdateArgs!]!
  ): [ProjectChallenge]
  deleteProjectChallenge(
    where: ProjectChallengeWhereUniqueInput!
  ): ProjectChallenge
  deleteProjectChallenges(
    where: [ProjectChallengeWhereUniqueInput!]!
  ): [ProjectChallenge]
  createArticle(data: ArticleCreateInput!): Article
  createArticles(data: [ArticleCreateInput!]!): [Article]
  updateArticle(
    where: ArticleWhereUniqueInput!
    data: ArticleUpdateInput!
  ): Article
  updateArticles(data: [ArticleUpdateArgs!]!): [Article]
  deleteArticle(where: ArticleWhereUniqueInput!): Article
  deleteArticles(where: [ArticleWhereUniqueInput!]!): [Article]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  experiences(
    where: ExperienceWhereInput! = {}
    orderBy: [ExperienceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Experience!]
  experience(where: ExperienceWhereUniqueInput!): Experience
  experiencesCount(where: ExperienceWhereInput! = {}): Int
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  projectChallenges(
    where: ProjectChallengeWhereInput! = {}
    orderBy: [ProjectChallengeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProjectChallenge!]
  projectChallenge(where: ProjectChallengeWhereUniqueInput!): ProjectChallenge
  projectChallengesCount(where: ProjectChallengeWhereInput! = {}): Int
  articles(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  article(where: ArticleWhereUniqueInput!): Article
  articlesCount(where: ArticleWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
